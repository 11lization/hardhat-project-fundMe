{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// 20230209 deployed smart contract 0x55833278c264C8CCE77E9a81BB26029cA1dd68a1\n// Get funds from users\n// Withdraw funds\n// Set a minimum funding value is USD\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n// we make mathmatical calculation to library\nimport \"./PriceConverter.sol\";\n\n// It makes gas smaller because error character string uses many storage.\nerror NotOwner();\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  // real USD value\n  // constant makes gas smaller.\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  // immutable keyword is used when it is in constructor\n  address public immutable i_owner;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    // Want to be able to set a minumum fund amount\n    // 1. How do we send ETH to this contract?\n    // assert : for security, require : for mistake\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"Didn't send enough!\"\n    ); // 1e18 = 1 * 10 ** 18\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] += msg.value;\n    // block chain don't allow https api\n\n    // What in reverting? undo any action before, and send remaining gas.\n\n    // We can get a ethereum price through chainlink\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      addressToAmountFunded[funder] = 0;\n    }\n\n    // reset the array\n    funders = new address[](0);\n\n    // // actually withdraw the funds\n\n    // // transfer\n    // // msg.sender = address\n    // // payable(msg.sender) = payable address\n    // payable(msg.sender).transfer(address(this).balance);\n\n    // // send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\");\n\n    // call\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) {\n      revert NotOwner();\n    }\n    // require(msg.sender == i_owner, \"Sender is not owner!\");\n    // run the rest of the code.\n    _;\n  }\n\n  // What happens if someone sends this contract ETH without calling the fund func?\n\n  // receive()\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  // fallback()\n\n  // Explainer from: https://solidity-by-example.org/fallback/\n  // Ether is sent to contract\n  //      is msg.data empty?\n  //          /   \\\n  //         yes  no\n  //         /     \\\n  //    receive()?  fallback()\n  //     /   \\\n  //   yes   no\n  //  /        \\\n  //receive()  fallback()\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    // ABI\n    // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    // We can instantiate smart contract via interface\n    // This is for goerli testnet ETH/USD address\n    // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    // ETH in terms of USD\n    // 3000.00000000 --> 8 floating points\n    // but msg.value has 18 floating points, so we have to multiply by 1e10\n    // 1ETH = 3000USD\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    // 3000_000000000000000000 = USD / ETH price\n    // 1_000000000000000000 ETH\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
