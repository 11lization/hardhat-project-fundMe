{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf545ed5802328973c83fc9c8d1368e7720e1203ec7df9bfaa61d8359977aa935",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1030863",
    "logsBloom": "0x
    "blockHash": "0xd27b9f5882aeda2893da9492b418f1b6b1cf46a95debc14833d3ebd92c1ca65c",
    "transactionHash": "0xf545ed5802328973c83fc9c8d1368e7720e1203ec7df9bfaa61d8359977aa935",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1030863",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d5523672b2cdf713f8812f298f4ef82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Moon MyeongKyun\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// 20230209 deployed smart contract 0x55833278c264C8CCE77E9a81BB26029cA1dd68a1\\n// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value is USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n// we make mathmatical calculation to library\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error codes\\n// It makes gas smaller because error character string uses many storage.\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/// @title A contract for crowd funding\\n/// @author Moon MyeongKyun\\n/// @notice This contract is to demo a sample funding contract\\n/// @dev This implements price feeds as our library\\ncontract FundMe {\\n  using PriceConverter for uint256;\\n\\n  // real USD value\\n  // constant makes gas smaller.\\n  uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n  address[] private s_funders;\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  // immutable keyword is used when it is in constructor\\n  address private immutable i_owner;\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  modifier onlyOwner() {\\n    if (msg.sender != i_owner) {\\n      revert FundMe__NotOwner();\\n    }\\n    // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n    // run the rest of the code.\\n    _;\\n  }\\n\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  // // What happens if someone sends this contract ETH without calling the fund func?\\n\\n  // // receive()\\n  // receive() external payable {\\n  //   fund();\\n  // }\\n\\n  // fallback() external payable {\\n  //   fund();\\n  // }\\n\\n  function fund() public payable {\\n    // Want to be able to set a minumum fund amount\\n    // 1. How do we send ETH to this contract?\\n    // assert : for security, require : for mistake\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    ); // 1e18 = 1 * 10 ** 18\\n    s_funders.push(msg.sender);\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    // block chain don't allow https api\\n\\n    // What in reverting? undo any action before, and send remaining gas.\\n\\n    // We can get a ethereum price through chainlink\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n\\n    // reset the array\\n    s_funders = new address[](0);\\n\\n    // // actually withdraw the funds\\n\\n    // // transfer\\n    // // msg.sender = address\\n    // // payable(msg.sender) = payable address\\n    // payable(msg.sender).transfer(address(this).balance);\\n\\n    // // send\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    // require(sendSuccess, \\\"Send failed\\\");\\n\\n    // call\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    // We want to store storage array in local array.\\n    address[] memory funders = s_funders;\\n    // cf) mappings(not array) can't be in memory, sorry!\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(\\n    address funder\\n  ) public view returns (uint256) {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n\\n  // fallback()\\n\\n  // Explainer from: https://solidity-by-example.org/fallback/\\n  // Ether is sent to contract\\n  //      is msg.data empty?\\n  //          /   \\\\\\n  //         yes  no\\n  //         /     \\\\\\n  //    receive()?  fallback()\\n  //     /   \\\\\\n  //   yes   no\\n  //  /        \\\\\\n  //receive()  fallback()\\n}\\n\",\"keccak256\":\"0x3da220173bcf30fd22f3eba5696de2b7a62c3a914c531a024369dff38711d2d4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    // ABI\\n    // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    // We can instantiate smart contract via interface\\n    // This is for goerli testnet ETH/USD address\\n    // 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    (, int256 price, , , ) = priceFeed.latestRoundData();\\n    // ETH in terms of USD\\n    // 3000.00000000 --> 8 floating points\\n    // but msg.value has 18 floating points, so we have to multiply by 1e10\\n    // 1ETH = 3000USD\\n    return uint256(price * 1e10);\\n  }\\n\\n  function getConversionRate(\\n    uint256 ethAmount,\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    // 3000_000000000000000000 = USD / ETH price\\n    // 1_000000000000000000 ETH\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x4b3a545968de9ce6db61f56f73a9310fecfd124c46427cd566bd9e893e0cf449\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012c7380380620012c78339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6111486200017f600039600081816101f10152818161044001526105cb01526111486000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aa0565b6101a6565b6040516100b49190610c96565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610c96565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610c20565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610c3b565b60405180910390f35b61015d61048e565b005b6101676105c9565b005b34801561017557600080fd5b50610190600480360381019061018b9190610acd565b61086d565b60405161019d9190610c20565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610ffe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610f57565b915050610277565b50600067ffffffffffffffff81111561033b5761033a61102d565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610c0b565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610c56565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b490919063ffffffff16565b101561050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610c76565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c09190610ccd565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610687575b5050505050905060005b815181101561075c5760008282815181106106f9576106f8610ffe565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610f57565b9150506106db565b50600067ffffffffffffffff8111156107785761077761102d565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600090805190602001906107bc929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107e390610c0b565b60006040518083038185875af1925050503d8060008114610820576040519150601f19603f3d011682016040523d82523d6000602084013e610825565b606091505b5050905080610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090610c56565b60405180910390fd5b5050565b600080828154811061088257610881610ffe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c0836108f0565b90506000670de0b6b3a764000085836108d99190610e6b565b6108e39190610d23565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190610afa565b5050509150506402540be400816109889190610d54565b915050919050565b828054828255906000526020600020908101928215610a09579160200282015b82811115610a085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b0565b5b509050610a169190610a1a565b5090565b5b80821115610a33576000816000905550600101610a1b565b5090565b600081359050610a46816110b6565b92915050565b600081519050610a5b816110cd565b92915050565b600081359050610a70816110e4565b92915050565b600081519050610a85816110e4565b92915050565b600081519050610a9a816110fb565b92915050565b600060208284031215610ab657610ab561105c565b5b6000610ac484828501610a37565b91505092915050565b600060208284031215610ae357610ae261105c565b5b6000610af184828501610a61565b91505092915050565b600080600080600060a08688031215610b1657610b1561105c565b5b6000610b2488828901610a8b565b9550506020610b3588828901610a4c565b9450506040610b4688828901610a76565b9350506060610b5788828901610a76565b9250506080610b6888828901610a8b565b9150509295509295909350565b610b7e81610ec5565b82525050565b610b8d81610f21565b82525050565b6000610ba0600b83610cbc565b9150610bab82611061565b602082019050919050565b6000610bc3601b83610cbc565b9150610bce8261108a565b602082019050919050565b6000610be6600083610cb1565b9150610bf1826110b3565b600082019050919050565b610c0581610f01565b82525050565b6000610c1682610bd9565b9150819050919050565b6000602082019050610c356000830184610b75565b92915050565b6000602082019050610c506000830184610b84565b92915050565b60006020820190508181036000830152610c6f81610b93565b9050919050565b60006020820190508181036000830152610c8f81610bb6565b9050919050565b6000602082019050610cab6000830184610bfc565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cd882610f01565b9150610ce383610f01565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1857610d17610fa0565b5b828201905092915050565b6000610d2e82610f01565b9150610d3983610f01565b925082610d4957610d48610fcf565b5b828204905092915050565b6000610d5f82610ed7565b9150610d6a83610ed7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610da957610da8610fa0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de657610de5610fa0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2357610e22610fa0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6057610e5f610fa0565b5b828202905092915050565b6000610e7682610f01565b9150610e8183610f01565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eba57610eb9610fa0565b5b828202905092915050565b6000610ed082610ee1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f2c82610f33565b9050919050565b6000610f3e82610f45565b9050919050565b6000610f5082610ee1565b9050919050565b6000610f6282610f01565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9557610f94610fa0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110bf81610ec5565b81146110ca57600080fd5b50565b6110d681610ed7565b81146110e157600080fd5b50565b6110ed81610f01565b81146110f857600080fd5b50565b61110481610f0b565b811461110f57600080fd5b5056fea2646970667358221220957af6d9ab0c5e863c22129cdfe56359f8ecf172ce4f238de2c1520a4e4379a264736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aa0565b6101a6565b6040516100b49190610c96565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610c96565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610c20565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610c3b565b60405180910390f35b61015d61048e565b005b6101676105c9565b005b34801561017557600080fd5b50610190600480360381019061018b9190610acd565b61086d565b60405161019d9190610c20565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610ffe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610f57565b915050610277565b50600067ffffffffffffffff81111561033b5761033a61102d565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610c0b565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610c56565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b490919063ffffffff16565b101561050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610c76565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c09190610ccd565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610687575b5050505050905060005b815181101561075c5760008282815181106106f9576106f8610ffe565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610f57565b9150506106db565b50600067ffffffffffffffff8111156107785761077761102d565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600090805190602001906107bc929190610990565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107e390610c0b565b60006040518083038185875af1925050503d8060008114610820576040519150601f19603f3d011682016040523d82523d6000602084013e610825565b606091505b5050905080610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090610c56565b60405180910390fd5b5050565b600080828154811061088257610881610ffe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c0836108f0565b90506000670de0b6b3a764000085836108d99190610e6b565b6108e39190610d23565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109719190610afa565b5050509150506402540be400816109889190610d54565b915050919050565b828054828255906000526020600020908101928215610a09579160200282015b82811115610a085782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b0565b5b509050610a169190610a1a565b5090565b5b80821115610a33576000816000905550600101610a1b565b5090565b600081359050610a46816110b6565b92915050565b600081519050610a5b816110cd565b92915050565b600081359050610a70816110e4565b92915050565b600081519050610a85816110e4565b92915050565b600081519050610a9a816110fb565b92915050565b600060208284031215610ab657610ab561105c565b5b6000610ac484828501610a37565b91505092915050565b600060208284031215610ae357610ae261105c565b5b6000610af184828501610a61565b91505092915050565b600080600080600060a08688031215610b1657610b1561105c565b5b6000610b2488828901610a8b565b9550506020610b3588828901610a4c565b9450506040610b4688828901610a76565b9350506060610b5788828901610a76565b9250506080610b6888828901610a8b565b9150509295509295909350565b610b7e81610ec5565b82525050565b610b8d81610f21565b82525050565b6000610ba0600b83610cbc565b9150610bab82611061565b602082019050919050565b6000610bc3601b83610cbc565b9150610bce8261108a565b602082019050919050565b6000610be6600083610cb1565b9150610bf1826110b3565b600082019050919050565b610c0581610f01565b82525050565b6000610c1682610bd9565b9150819050919050565b6000602082019050610c356000830184610b75565b92915050565b6000602082019050610c506000830184610b84565b92915050565b60006020820190508181036000830152610c6f81610b93565b9050919050565b60006020820190508181036000830152610c8f81610bb6565b9050919050565b6000602082019050610cab6000830184610bfc565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cd882610f01565b9150610ce383610f01565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1857610d17610fa0565b5b828201905092915050565b6000610d2e82610f01565b9150610d3983610f01565b925082610d4957610d48610fcf565b5b828204905092915050565b6000610d5f82610ed7565b9150610d6a83610ed7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610da957610da8610fa0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de657610de5610fa0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2357610e22610fa0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6057610e5f610fa0565b5b828202905092915050565b6000610e7682610f01565b9150610e8183610f01565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eba57610eb9610fa0565b5b828202905092915050565b6000610ed082610ee1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f2c82610f33565b9050919050565b6000610f3e82610f45565b9050919050565b6000610f5082610ee1565b9050919050565b6000610f6282610f01565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9557610f94610fa0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b6110bf81610ec5565b81146110ca57600080fd5b50565b6110d681610ed7565b81146110e157600080fd5b50565b6110ed81610f01565b81146110f857600080fd5b50565b61110481610f0b565b811461110f57600080fd5b5056fea2646970667358221220957af6d9ab0c5e863c22129cdfe56359f8ecf172ce4f238de2c1520a4e4379a264736f6c63430008070033",
  "devdoc": {
    "author": "Moon MyeongKyun",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}